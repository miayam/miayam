// Golden Ratio Typography Based On Greg Ricky's Gist
// https://gist.github.com/gregrickaby/5001983

@import "~mathsass/dist/math";


// @author Muhammad D. R.
// @since 1.0
// @requires $defaultContentWidth
//
$defaultContentWidth: 740; // Change as you like
$phi: (1 + sqrt(5)) / 2; // 1.61803398874989 or "The Golden Ratio"

@function calcFontSize($contentWidth: $defaultContentWidth) {
  $fontSize: sqrt($contentWidth) / $phi;
  @return round($fontSize);
}


// Font Size
//
// Calculated font size based on $defaultContentWidth.
//
// @author Muhammad D. R.
// @since 1.0
//
// Usage: @include grFontSize();
//        @include grFontSize(480);
//        @include p();
//        @include p(480);
//
@mixin grFontSize($contentWidth: $defaultContentWidth) {
  $lineHeightRatio: sqrt($contentWidth) / $phi;

  font-size: calcFontSize($contentWidth) + px;
  font-size: (calcFontSize($contentWidth) / calcFontSize($contentWidth)) + rem;
  line-height: calcFontSize($contentWidth) / $lineHeightRatio;
}

@mixin p($contentWidth: $defaultContentWidth) {
    @include grFontSize($contentWidth);
}


// Base Font Size On HTML Tag To Determine REM Value
//
// @author Muhammad D. R.
// @since 1.0/
// @author Muhammad D. R.
//
// Usage: @include grBaseFontSize();
//        @include grBaseFontSize(480);
//
@mixin grBaseFontSize($contentWidth: $defaultContentWidth) {
  font-size: calcFontSize($contentWidth) + px;
}


// Title Size (H1)
//
// Calculated title size based on $defaultContentWidth.
//
// @author Muhammad D. R.
// @since 1.0
//
// Usage: @include grTitleSize();
//        @include grTitleSize(480);
//        @include h1();
//        @include h1(480);
//
@function calcTitleSize($contentWidth: $defaultContentWidth) {
  $fontSize: calcFontSize($contentWidth) * pow($phi, 2);
  @return round($fontSize);
}

@mixin grTitleSize($contentWidth: $defaultContentWidth) {
  $lineHeightRatio: sqrt($contentWidth) / $phi;

  font-size: calcTitleSize($contentWidth) + px;
  font-size: (calcTitleSize($contentWidth) / calcFontSize($contentWidth)) + rem;
  line-height: calcTitleSize($contentWidth) / $lineHeightRatio;
}

@mixin h1($contentWidth: $defaultContentWidth) {
    @include grTitleSize($contentWidth);
}

// Secondary Title Size (H2)
//
// Calculated title size based on $defaultContentWidth.
//
// @author Muhammad D. R.
// @since 1.0
//
// Usage: @include grSecondaryTitleSize();
//        @include grSecondaryTitleSize(480);
//        @include h2()
//        @include h2(480)
//
@function calcSecondaryTitleSize($contentWidth: $defaultContentWidth) {
  $fontSize: calcFontSize($contentWidth) * pow($phi, 3 / 2.0);
  @return round($fontSize);
}

@mixin grSecondaryTitleSize($contentWidth: $defaultContentWidth) {
  $lineHeightRatio: sqrt($contentWidth) / $phi;

  font-size: calcSecondaryTitleSize($contentWidth) + px;
  font-size: (calcSecondaryTitleSize($contentWidth) / calcFontSize($contentWidth)) + rem;
  line-height: calcSecondaryTitleSize($contentWidth) / $lineHeightRatio;
}

@mixin h2($contentWidth: $defaultContentWidth) {
    @include grSecondaryTitleSize($contentWidth);
}


// Headline Size (H3)
//
// Calculated headline size based on $defaultContentWidth.
//
// @author Muhammad D. R.
// @since 1.0
//
// Usage: @include grHeadlineSize();
//        @include grHeadlineSize(480);
//        @include h3();
//        @include h3(480);
//
@function calcHeadlineSize($contentWidth: $defaultContentWidth) {
  $fontSize: calcFontSize($contentWidth) * pow($phi, 1);
  @return round($fontSize);
}

@mixin grHeadlineSize($contentWidth: $defaultContentWidth) {
  $lineHeightRatio: sqrt($contentWidth) / $phi;

  font-size: calcHeadlineSize($contentWidth) + px;
  font-size: (calcHeadlineSize($contentWidth) / calcFontSize($contentWidth)) + rem;
  line-height: calcHeadlineSize($contentWidth) / $lineHeightRatio;
}

@mixin h3($contentWidth: $defaultContentWidth) {
    @include grHeadlineSize($contentWidth);
}


// Sub-headline Size (H4)
//
// Caclulated sub-headline size based on $defaultContentWidth.
//
// @author Muhammad D. R.
// @since 1.0
//
// Usage: @include grSubHeadlineSize();
//        @include grSubHeadlineSize(480);
//        @include h4();
//        @include h4(480);
//
@function calcSubHeadlineSize($contentWidth: $defaultContentWidth) {
  $fontSize: calcFontSize($contentWidth) * sqrt($phi);
  @return round($fontSize);
}

@mixin grSubHeadlineSize($contentWidth: $defaultContentWidth) {
  $lineHeightRatio: sqrt($contentWidth) / $phi;

  font-size: calcSubHeadlineSize($contentWidth) + px;
  font-size: (calcSubHeadlineSize($contentWidth) / calcFontSize($contentWidth)) + rem;
  line-height: calcSubHeadlineSize() / $lineHeightRatio;
}

@mixin h4($contentWidth: $defaultContentWidth) {
    @include grSubHeadlineSize($contentWidth);
}


// Secondary Text (Smaller than base font size, usually in <span/>)
//
// Calculated secondary text size based on $defaultContentWidth.
//
// @author Muhammad D. R.
// @since 1.0
//
// Usage: @include grSecondaryText();
//        @include grSecondaryText(480);
//        @include span();
//        @include span(480);
//
@function calcSecondaryText($contentWidth: $defaultContentWidth) {
  $fontSize: calcFontSize($contentWidth) * (1 / sqrt($phi));
  @return round($fontSize);
}

@mixin grSecondaryText($contentWidth: $defaultContentWidth) {
  $lineHeightRatio: sqrt($contentWidth) / $phi;

  font-size: calcSecondaryText($contentWidth) + px;
  font-size: (calcSecondaryText($contentWidth) / calcFontSize($contentWidth)) + rem;
  line-height: calcSecondaryText($contentWidth) / $lineHeightRatio;
}

@mixin span($contentWidth: $defaultContentWidth) {
    @include grSecondaryText($contentWidth);
}


// Default Line Height
//
// Calculate default line-height based on $defaultContentWidth.
//
// @author Muhammad D. R.
// @since 1.0
//
// Usage: @include grBaseLineHeight();
//        @include grBaseLineHeight(480);
//
@function calcBaseLineHeight($contentWidth: $defaultContentWidth) {
  $fontSizeRatio: sqrt($contentWidth) / $phi;
  $adjustmentRatio: 1 / (2 * $phi);
  $adjustmentSize: calcFontSize($contentWidth) * ($phi - $adjustmentRatio * (1 - ($contentWidth / pow(calcFontSize($contentWidth) * $phi, 2))));
  $baseLineHeight: $adjustmentSize / $fontSizeRatio;
  @return $baseLineHeight;
}

@mixin grBaseLineHeight($contentWidth: $defaultContentWidth) {
  line-height: calcBaseLineHeight($contentWidth);
}


// Custom Line Height
//
// Calculate a Golden Ratio line-height based on a custom
// value specified by you.
//
// @author Muhammad D. R.
// @since 1.0
//
// Usage: @include calcCustomLineHeight(26);
//        @include calcCustomLineHeight(26, 480);
//
@function calcCustomLineHeight($target, $contentWidth: $defaultContentWidth) {
  $fontSizeRatio: sqrt($contentWidth) / $phi;
  $lineHeight: $target / $fontSizeRatio;
  @return $lineHeight;
}

@mixin grCustomLineHeight($target, $contentWidth: $defaultContentWidth) {
  line-height: calcCustomLineHeight($target, $contentWidth);
}
